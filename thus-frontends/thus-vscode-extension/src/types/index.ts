import type { LiuIDEType } from "./types-atom"

export interface LiuAuthStatus {
  token: string
  serial: string
  client_key: string      // AES Key generated by frontend
  updated_stamp: number
  nickname?: string
  personal_space_id: string
  api_domain?: string
}


export interface LiuInfo {
  ideType: LiuIDEType
  isDesktop: boolean
  isWeb: boolean
  extensionId: string
  extensionKind?: "ui" | "workspace"
  ideVersion: string
  extensionVersion: string
  machineId?: string
  sessionId?: string
  uriScheme: string
  remoteName?: string
  deviceStr?: string
  deviceName?: string
}

export interface LiuRqOpt {
  method?: "POST" | "GET"
  signal?: AbortSignal       // 信号对象，用于中止 fetch() 请求
  timeout?: number           // 超时的毫秒数，默认为 10000; 当 signal 属性存在时，此值无意义
}

export interface LiuRqReturn<T> {
  code: string
  errMsg?: string
  showMsg?: string
  data?: T
}

export interface LiuErrReturn {
  code: string
  errMsg?: string
  showMsg?: string
}

/*************************** Encrypt or Decrypt **********************/
export interface LiuPlainText<T = any> {
  pre: string        // the first 5 characters of client_key
  nonce: string
  data: T
}

export interface CryptoCipherAndIV {
  cipherText: string
  iv: string
}